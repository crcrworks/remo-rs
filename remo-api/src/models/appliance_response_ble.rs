/*
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplianceResponseBle {
    #[serde(rename = "addr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub addr: Option<Option<serde_json::Value>>,
    #[serde(rename = "addr_type", skip_serializing_if = "Option::is_none")]
    pub addr_type: Option<String>,
    #[serde(rename = "bonded", skip_serializing_if = "Option::is_none")]
    pub bonded: Option<bool>,
    #[serde(rename = "macros", skip_serializing_if = "Option::is_none")]
    pub macros: Option<std::collections::HashMap<String, models::ApplianceResponseBleMacrosValue>>,
    #[serde(rename = "sesame", skip_serializing_if = "Option::is_none")]
    pub sesame: Option<Box<models::ApplianceResponseBleSesame>>,
}

impl ApplianceResponseBle {
    pub fn new() -> ApplianceResponseBle {
        ApplianceResponseBle {
            addr: None,
            addr_type: None,
            bonded: None,
            macros: None,
            sesame: None,
        }
    }
}


/*
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplianceResponse {
    #[serde(rename = "aircon", skip_serializing_if = "Option::is_none")]
    pub aircon: Option<Box<models::ApplianceResponseAircon>>,
    #[serde(rename = "aircon_smart_eco_mode", skip_serializing_if = "Option::is_none")]
    pub aircon_smart_eco_mode: Option<Box<models::ApplianceResponseAirconSmartEcoMode>>,
    #[serde(rename = "ble", skip_serializing_if = "Option::is_none")]
    pub ble: Option<Box<models::ApplianceResponseBle>>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<models::ApplianceResponseDevice>>,
    #[serde(rename = "echonetlite", skip_serializing_if = "Option::is_none")]
    pub echonetlite: Option<Box<models::ApplianceResponseEchonetlite>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "light", skip_serializing_if = "Option::is_none")]
    pub light: Option<Box<models::ApplianceResponseLight>>,
    #[serde(rename = "light_projector", skip_serializing_if = "Option::is_none")]
    pub light_projector: Option<Box<models::ApplianceResponseLightProjector>>,
    #[serde(rename = "model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub model: Option<Option<serde_json::Value>>,
    #[serde(rename = "mornin_plus", skip_serializing_if = "Option::is_none")]
    pub mornin_plus: Option<Box<models::ApplianceResponseMorninPlus>>,
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    #[serde(rename = "qrio_lock", skip_serializing_if = "Option::is_none")]
    pub qrio_lock: Option<Box<models::ApplianceResponseQrioLock>>,
    #[serde(rename = "settings", skip_serializing_if = "Option::is_none")]
    pub settings: Option<Box<models::ApplianceResponseSettings>>,
    #[serde(rename = "signals", skip_serializing_if = "Option::is_none")]
    pub signals: Option<Vec<models::ApplianceResponseSignalsInner>>,
    #[serde(rename = "smart_meter", skip_serializing_if = "Option::is_none")]
    pub smart_meter: Option<Box<models::ApplianceResponseSmartMeter>>,
    #[serde(rename = "tv", skip_serializing_if = "Option::is_none")]
    pub tv: Option<Box<models::ApplianceResponseTv>>,
    /// Appliance types. AC, TV, LIGHT, etc.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl ApplianceResponse {
    pub fn new() -> ApplianceResponse {
        ApplianceResponse {
            aircon: None,
            aircon_smart_eco_mode: None,
            ble: None,
            device: None,
            echonetlite: None,
            id: None,
            image: None,
            light: None,
            light_projector: None,
            model: None,
            mornin_plus: None,
            nickname: None,
            qrio_lock: None,
            settings: None,
            signals: None,
            smart_meter: None,
            tv: None,
            r#type: None,
        }
    }
}


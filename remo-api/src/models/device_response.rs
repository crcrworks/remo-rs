/*
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceResponse {
    #[serde(rename = "bt_mac_address", skip_serializing_if = "Option::is_none")]
    pub bt_mac_address: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "firmware_version", skip_serializing_if = "Option::is_none")]
    pub firmware_version: Option<String>,
    #[serde(rename = "humidity_offset", skip_serializing_if = "Option::is_none")]
    pub humidity_offset: Option<f32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "mac_address", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SensorValue key means 'te' = temperature, 'hu' = humidity, 'il' = illumination, 'mo' = movement. The val of 'mo' is always 1 and when movement event is captured created_at is updated.
    #[serde(rename = "newest_events", skip_serializing_if = "Option::is_none")]
    pub newest_events: Option<std::collections::HashMap<String, models::DeviceResponseNewestEventsValue>>,
    #[serde(rename = "online", skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    #[serde(rename = "serial_number", skip_serializing_if = "Option::is_none")]
    pub serial_number: Option<String>,
    #[serde(rename = "temperature_offset", skip_serializing_if = "Option::is_none")]
    pub temperature_offset: Option<f32>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Deprecated. Do not use in new code.
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<models::DeviceResponseUsersInner>>,
}

impl DeviceResponse {
    pub fn new() -> DeviceResponse {
        DeviceResponse {
            bt_mac_address: None,
            created_at: None,
            firmware_version: None,
            humidity_offset: None,
            id: None,
            mac_address: None,
            name: None,
            newest_events: None,
            online: None,
            serial_number: None,
            temperature_offset: None,
            updated_at: None,
            users: None,
        }
    }
}


/*
 * Nature API
 *
 * Read/Write Nature Remo
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AirconSettingsResponse {
    /// Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.
    #[serde(rename = "button", skip_serializing_if = "Option::is_none")]
    pub button: Option<String>,
    /// AC air direction. Empty means automatic.
    #[serde(rename = "dir", skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    /// AC horizontal air direction.
    #[serde(rename = "dirh", skip_serializing_if = "Option::is_none")]
    pub dirh: Option<String>,
    /// AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
    #[serde(rename = "temp", skip_serializing_if = "Option::is_none")]
    pub temp: Option<String>,
    /// Temperature unit. 'c' or 'f' or '' for unknown.
    #[serde(rename = "temp_unit", skip_serializing_if = "Option::is_none")]
    pub temp_unit: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
    #[serde(rename = "vol", skip_serializing_if = "Option::is_none")]
    pub vol: Option<String>,
}

impl AirconSettingsResponse {
    pub fn new() -> AirconSettingsResponse {
        AirconSettingsResponse {
            button: None,
            dir: None,
            dirh: None,
            mode: None,
            temp: None,
            temp_unit: None,
            updated_at: None,
            vol: None,
        }
    }
}

